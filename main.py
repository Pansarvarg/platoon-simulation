import cProfile
import time

from platooning.platooning_methods import GreedyPlatooning, RandomPlatooning, SubModularityPlatooning
from route_calculation import get_path_data_sets, generate_routes
from run_simulation import dynamic_simulation, average_fuel_savings
import matplotlib.pyplot as plt
import numpy as np


start = 0
pr = None
def setup():
    global start
    global pr
    start = time.time()
    pr = cProfile.Profile()
    pr.disable()
    pr.enable()


def tear_down():
    pr.disable()
    pr.dump_stats("profile.pstat")
    t = time.time() - start
    print "%s: %.3f" % ("Time", t)


def main():
    setup()
    # generate_routes(400, './testing/testroutes/test400-3/')
    # generate_routes(400, './testing/testroutes/test400-4/')
    # generate_routes(400, './testing/testroutes/test400-5/')
    # plot_clustering_savings_graph()
    print horizon_data()
    # result = dynamic_simulation(SubModularityPlatooning(True), folder='./testing/testroutes/test400-2/')
    # print sum([x.current_fuel_consumption() for x in result]) / sum([x.default_plan.fuel for x in result])
    # plot_expected_graph()
    tear_down()


def clustering_data():
    fuel_savings = []
    for method in [GreedyPlatooning(), RandomPlatooning(0), SubModularityPlatooning(True), SubModularityPlatooning(False)]:
        fuel_savings.append(average_fuel_savings(method,
                                                 ['./testing/testroutes/test400-1/', './testing/testroutes/test400-2/',
                                                  './testing/testroutes/test400-3/', './testing/testroutes/test400-4/',
                                                  './testing/testroutes/test400-5/']))
        print fuel_savings
    return fuel_savings

def horizon_data():
    total = []
    for method in [GreedyPlatooning(), RandomPlatooning(0), SubModularityPlatooning(True), SubModularityPlatooning(False)]:
        savings = []
        for horizon in range(0, 7210, 300):
            print "%d/7200" % horizon
            fuel_savings = average_fuel_savings(method,
                                                ['./testing/testroutes/test400-1/', './testing/testroutes/test400-2/',
                                                 './testing/testroutes/test400-3/', './testing/testroutes/test400-4/',
                                                 './testing/testroutes/test400-5/'], horizon)
            savings.append(fuel_savings)
            print fuel_savings
        print savings
        total.append(savings)
    print total
    return total


def interval_data():
    savings = []
    for interval in range(300, 7210, 300):
        print "%d/7200" % interval
        fuel_savings = average_fuel_savings(SubModularityPlatooning(False),
                                            ['./testing/testroutes/test100-1/', './testing/testroutes/test100-2/',
                                             './testing/testroutes/test100-3/', './testing/testroutes/test100-4/',
                                             './testing/testroutes/test100-5/'], interval=interval)
        savings.append(fuel_savings)
        print fuel_savings
    print savings


def plot_expected_graph():
    data = [53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53872.379664897788, 53872.379664897788, 53872.379664897788, 53872.379664897788, 53872.379664897788, 53872.379664897788, 53851.970542722745, 53851.970542722745, 53841.257247676651, 53842.119397206159, 53842.119397206159, 53842.119397206159, 53842.119397206159, 53842.119397206159, 53842.119397206159, 53842.119397206159, 53840.878190264455, 53834.162983977512, 53828.38321097476, 53828.38321097476, 53814.70125177523, 53814.70125177523, 53814.70125177523, 53807.940365717513, 53791.420951764783, 53730.362795895126, 53730.362795895126, 53735.421378168016, 53735.421378168016, 53699.772274595161, 53688.694823376863, 53688.290828207741, 53681.634955992136, 53681.634955992136, 53681.634955992136, 53681.634955992136, 53674.385483652819, 53674.385483652819, 53677.614409226415, 53674.369160992428, 53674.369160992428, 53650.690734228163, 53650.690734228163, 53631.438292345163, 53612.334215701703, 53612.334215701703, 53612.334215701703, 53612.334215701703, 53584.568526468196, 53589.138902754697, 53596.73912349873, 53596.73912349873, 53590.06260845832, 53590.06260845832, 53551.742607259483, 53548.570299875078, 53547.086399870212, 53549.80783460704, 53530.206670091415, 53496.610523302181, 53496.610523302181, 53496.610523302181, 53496.610523302181, 53496.610523302181, 53496.610523302181, 53487.066365268678, 53487.066365268678, 53487.066365268678, 53487.066365268678, 53486.626601059877, 53474.160673441031, 53463.387564463366, 53393.367722164883, 53385.693736717541, 53385.693736717541, 53382.189517927851, 53375.174174379252, 53375.174174379252, 53375.174174379252, 53374.365702525029, 53374.365702525029, 53374.365702525029, 53374.365702525029, 53367.929619977294, 53360.438436783123, 53360.438436783123, 53360.438436783123, 53360.438436783123, 53360.438436783123, 53360.438436783123, 53356.221238487647, 53356.221238487647, 53356.221238487647, 53356.221238487647, 53356.221238487647, 53336.514144637447, 53296.100081649201, 53240.488651998588, 53240.488651998588, 53210.105819956487, 53210.105819956487, 53210.105819956487, 53151.329817702645, 53130.042859596186, 53133.868654374033, 53133.682724004917, 53125.424663592799, 53125.120961098262, 53125.424663592799, 53125.120961098262, 53125.120961098262, 53125.120961098262, 53125.120961098262, 53129.708459307454, 53129.708459307454, 53129.708459307454, 53129.708459307454, 53129.708459307454, 53129.708459307454, 53124.473690413826, 53098.089298007137, 53106.486090648497, 53106.486090648497, 53106.486090648497, 53106.486090648497, 53069.915837513297, 53069.915837513297, 53069.915837513297, 53052.758986052751, 53057.496250684242, 53018.283924366173, 53018.283924366173, 53018.283924366173, 52991.048085296265, 52991.048085296265, 52991.048085296265, 52991.048085296265, 52991.048085296265, 52981.150072388147, 52995.385839291383, 52995.385839291383, 52992.489432387592, 52992.489432387592, 52992.489432387592, 52998.645330228144, 52998.645330228144, 52998.645330228144, 52998.018184739645, 52998.018184739645, 52963.072703427679, 52963.072703427679, 52963.072703427679, 52963.072703427679, 52906.72794382296, 52906.727943822974, 52906.727943822974, 52903.733982126985, 52903.733982126985, 52926.055075954224, 52926.055075954224, 52908.297191277816, 52908.297191277816, 52908.297191277816, 52908.297191277816, 52898.677529817709, 52898.677529817709, 52898.677529817709, 52898.677529817709, 52898.677529817709, 52898.677529817709, 52888.272779855077, 52888.272779855077, 52888.272779855077, 52888.272779855077, 52867.344741207518, 52889.769056231933, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52882.715935497166, 52868.970953782904, 52869.95293236729, 52817.926477553323, 52815.543544809931, 52807.803246096257, 52807.763632757153, 52767.784149474217, 52729.026667693368, 52729.026667693368, 52729.026667693368, 52666.552448539238, 52650.659744062621, 52625.502239449081, 52619.809343651068, 52617.911910584968, 52617.911910584968, 52617.911910584968, 52617.911910584968, 52617.911910584968, 52584.199250871505, 52584.199250871505, 52584.199250871505, 52577.740461899361, 52577.740461899361, 52577.740461899361, 52577.740461899361, 52577.740461899361, 52535.58308533841, 52528.229724538862, 52521.918852451476, 52501.981516247557, 52501.981516247557, 52482.551341594633, 52482.459744714768, 52482.459744714768, 52478.380844128988, 52478.380844128988, 52454.973517573904, 52449.102257886203, 52449.102257886203, 52430.690116359794, 52430.690116359794, 52430.690116359794, 52430.690116359794, 52430.690116359794, 52369.41311841397, 52369.41311841397, 52369.41311841397, 52365.89422849378, 52365.89422849378, 52365.89422849378, 52365.89422849378, 52365.89422849378, 52364.814553091142, 52364.814553091142, 52364.814553091142, 52358.572411466477, 52358.572411466477, 52358.572411466477, 52344.772416334556, 52303.702972729414, 52308.34246810418, 52306.061399328901, 52306.061399328901, 52306.061399328901, 52306.061399328901, 52292.503279685567, 52292.503279685567, 52292.503279685581, 52292.503279685567, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52285.065651562691, 52285.065651562691, 52285.065651562691, 52285.065651562691, 52267.467684097865, 52267.467684097865, 52267.467684097865, 52267.467684097865, 52221.073312715947, 52221.073312715947, 52189.308303648417, 52189.308303648417, 52189.308303648417, 52188.773968799753, 52154.811653552199, 52157.351975417405, 52157.351975417405, 52157.351975417405, 52157.351975417405, 52152.99748803633, 52152.297311219969, 52152.297311219969, 52144.57189033585, 52144.57189033585, 52144.57189033585, 52144.57189033585, 52141.500194838343, 52132.549769266043, 52120.552081161659, 52120.552081161659, 52120.552081161659, 52120.552081161659, 52120.552081161659, 52100.839894722973, 52075.281833465982, 52075.281833465982, 52075.281833465982, 52075.281833465982, 52075.281833465982, 52075.245999940409, 52075.245999940409, 52075.245999940409, 52075.245999940409, 52069.725896085467, 52026.698607372789, 52026.698607372789, 52026.698607372789, 52026.698607372789, 52026.698607372789, 52026.698607372789, 52026.698607372789, 52033.950734957834, 51960.653191448349, 51950.776826447196, 51950.776826447196, 51941.863505500238, 51941.863505500238, 51941.863505500238, 51941.863505500238, 51941.863505500238, 51912.405696997652, 51910.790562698356, 51910.790562698356, 51910.790562698356, 51910.362517890739, 51906.681439053966, 51906.681439053966, 51906.681439053966, 51906.681439053966, 51883.343562477297, 51885.494876079552, 51876.703081219282, 51837.112090763898, 51837.112090763898, 51837.112090763898, 51837.437546157889, 51837.437546157889, 51770.728080297791, 51770.728080297791, 51770.728080297791, 51770.728080297791, 51770.728080297791, 51752.331031112233, 51752.331031112233, 51752.331031112233, 51731.709480540623, 51702.700673461615, 51702.700673461615, 51696.153450190461, 51696.153450190461, 51696.153450190461, 51700.352673750538, 51683.898829198013, 51683.898829198013, 51665.453081212057, 51676.36708082955, 51673.074201377989, 51673.074201377989, 51673.074201377989, 51657.536226489516, 51635.955383419197, 51635.955383419197, 51629.073465681562, 51629.073465681562, 51629.073465681562, 51618.480745913948, 51618.33690650206, 51618.33690650206, 51579.689434992702, 51579.689434992702, 51568.676978949137, 51568.676978949137, 51568.676978949137, 51568.676978949137, 51568.676978949137, 51568.676978949137, 51546.608393430368, 51546.608393430368, 51502.232010450585, 51459.582900192952, 51441.532753978499, 51439.717873450136, 51429.502112870301, 51407.206388421619, 51407.206388421626]

    x = range(len(data))
    plt.plot(x, data)
    plt.plot(x, [data[0]] * len(data))
    # plt.plot(x, [11448.5257358] * len(data))

    plt.ylim([0, 55000])
    plt.ylabel("Expected fuel consumption")
    plt.xlabel("Time")
    plt.legend(['Adapted plans', 'Default plan'])
    plt.show()


def plot_active_graph():
    data = [0, 1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 31, 32, 31, 31, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 37, 38, 38, 38, 38, 38, 40, 41, 42, 42, 42, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 43, 43, 43, 43, 43, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 45, 45, 45, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 46, 47, 47, 48, 48, 49, 50, 51, 52, 53, 53, 53, 53, 52, 53, 53, 53, 54, 53, 53, 53, 53, 53, 53, 54, 54, 54, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 53, 53, 53, 55, 54, 54, 54, 54, 53, 52, 52, 52, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 54, 53, 53, 54, 54, 54, 53, 53, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 54, 53, 54, 55, 55, 54, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 54, 53, 53, 53, 52, 52, 52, 53, 53, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 52, 52, 51, 51, 52, 52, 55, 55, 55, 55, 56, 55, 55, 55, 55, 56, 56, 56, 57, 56, 56, 57, 57, 55, 55, 54, 54, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 53, 54, 54, 56, 58, 58, 58, 58, 57, 57, 57, 57, 57, 56, 56, 55, 56, 56, 56, 57, 56, 56, 56, 57, 57, 57, 56, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 61, 61, 61, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 63, 64, 63, 63, 63, 63, 63, 62, 62, 63, 63, 63, 64, 65, 64, 64, 64, 63, 63, 63, 63, 63, 64, 64, 66, 67, 67, 68, 68, 68, 68, 69, 68, 68, 67, 66, 66, 66, 64, 64, 64, 63, 64, 64, 63, 63, 63, 63, 63, 62, 61, 62, 61, 61, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 60, 60, 60, 61, 62, 62, 61, 60, 60, 60, 61, 60, 60, 60, 60, 60, 60, 60, 62, 62, 62, 62, 60, 62, 62, 64, 63, 64, 64, 65, 64, 64, 63, 63, 63, 63, 62, 62, 63, 63, 63, 63, 64, 64, 64, 64, 64, 62, 61, 61, 63, 64, 65, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 66, 66, 66, 66, 66, 66, 66, 66, 65, 66, 66, 65, 65, 66, 67, 67, 67, 67, 67, 67, 66, 65, 65, 64, 65, 65, 65, 65, 64, 63, 62, 64, 64, 64, 64, 63, 63, 63, 61, 61, 62, 61, 61, 61, 61, 61, 60, 60, 60, 59, 58, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 61, 61, 62, 62, 62, 62, 61, 62, 62, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63, 63, 63, 63, 63, 63, 62, 62, 62, 65, 65, 65, 65, 66, 67, 68, 68, 67, 67, 67, 67, 66, 67, 67, 67, 66, 66, 67, 66, 66, 66, 64, 64, 63, 63, 64, 64, 64, 64, 65, 65, 66, 66, 65, 66, 65, 66, 66, 69, 70, 71, 71, 72, 72, 72, 73, 73, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 73, 73, 74, 75, 75, 74, 74, 74, 75, 76, 76, 75, 75, 75, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 76, 76, 75, 75, 75, 75, 75, 75, 75, 73, 73, 71, 71, 71, 71, 71, 71, 72, 71, 70, 69, 69, 70, 71, 70, 68, 68, 68, 68, 67, 66, 66, 67, 67, 67, 67, 66, 67, 67, 67, 66, 67, 68, 68, 68, 68, 68, 68, 66, 66, 67, 66, 65, 65, 66, 65, 65, 65, 65, 65, 65, 65, 65, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 64, 64, 64, 64, 64, 64, 63, 63, 63, 63, 63, 63, 64, 65, 65, 65, 65, 65, 65, 67, 67, 66, 66, 66, 66, 66, 65, 65, 64, 65, 65, 65, 64, 64, 63, 65, 66, 66, 67, 67, 66, 66, 66, 65, 65, 65, 64, 64, 65, 65, 65, 64, 63, 64, 64, 65, 65, 64, 64, 65, 65, 65, 65, 63, 62, 62, 62, 64, 64, 63, 63, 63, 64, 64, 64, 64, 63, 63, 63, 63, 63, 63, 62, 62, 62, 62, 62, 62, 62, 61, 60, 60, 60, 60, 61, 61, 61, 61, 60, 60, 60, 58, 57, 58, 58, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 59, 58, 58, 58, 58, 57, 57, 57, 56, 56, 56, 56, 56, 56, 56, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 55, 55, 55, 54, 54, 55, 55, 54, 53, 53, 53, 53, 52, 52, 52, 52, 52, 51, 50, 50, 49, 49, 49, 49, 49, 49, 50, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 53, 53, 53, 54, 54, 55, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 54, 54, 54, 55, 55, 56, 56, 56, 56, 56, 56, 55, 56, 56, 56, 56, 56, 56, 56, 57, 57, 56, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 56, 55, 55, 55, 54, 54, 55, 54, 54, 54, 54, 54, 56, 56, 56, 56, 56, 56, 57, 57, 57, 56, 56, 56, 56, 56, 56, 55, 56, 56, 56, 55, 55, 55, 55, 54, 54, 53, 53, 53, 54, 54, 54, 54, 54, 55, 55, 55, 56, 57, 58, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 57, 57, 56, 56, 55, 56, 56, 57, 56, 56, 57, 57, 58, 58, 58, 58, 56, 55, 54, 54, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 58, 58, 57, 57, 58, 58, 59, 59, 59, 59, 59, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 60, 60, 59, 59, 58, 58, 59, 60, 60, 60, 60, 59, 58, 57, 57, 57, 58, 58, 58, 58, 57, 57, 57, 57, 57, 57, 57, 56, 56, 56, 55, 54, 55, 56, 57, 57, 57, 56, 57, 57, 57, 57, 58, 59, 57, 56, 56, 55, 54, 54, 54, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52, 53, 53, 54, 55, 55, 55, 55, 55, 55, 55, 55, 56, 55, 55, 55, 54, 56, 57, 58, 59, 59, 59, 59, 58, 57, 57, 56, 56, 56, 56, 56, 55, 56, 57, 58, 58, 58, 58, 58, 58, 58, 58, 57, 56, 56, 56, 56, 57, 57, 57, 56, 57, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 56, 55, 54, 54, 54, 54, 54, 54, 54, 54, 53, 52, 52, 52, 52, 52, 52, 53, 52, 52, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 51, 52, 53, 53, 54, 54, 54, 54, 55, 55, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 58, 59, 59, 59, 59, 60, 60, 60, 60, 59, 62, 62, 61, 62, 62, 61, 61, 61, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 59, 59, 58, 58, 58, 58, 58, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 59, 59, 58, 57, 57, 57, 56, 55, 55, 55, 55, 55, 54, 54, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 56, 57, 56, 57, 56, 56, 55, 55, 56, 57, 57, 56, 54, 55, 55, 55, 55, 55, 55, 55, 55, 54, 54, 51, 51, 51, 51, 51, 51, 51, 51, 50, 49, 49, 49, 48, 48, 48, 48, 48, 48, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 51, 51, 51, 51, 50, 49, 49, 49, 49, 50, 48, 48, 48, 48, 48, 48, 47, 47, 45, 45, 45, 46, 46, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 49, 50, 50, 49, 49, 49, 49, 49, 49, 49, 49, 50, 49, 49, 49, 49, 47, 47, 47, 48, 48, 49, 48, 48, 47, 47, 46, 46, 46, 47, 47, 48, 48, 49, 50, 50, 51, 52, 53, 52, 53, 54, 54, 54, 54, 54, 54, 54, 54, 52, 53, 53, 53, 54, 54, 54, 54, 54, 55, 55, 54, 54, 55, 56, 56, 56, 56, 56, 55, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 55, 55, 55, 55, 56, 56, 56, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 53, 53, 53, 53, 54, 54, 52, 52]
    x = range(len(data))
    plt.plot(x, data)
    # plt.plot(x, [11448.5257358] * len(data))

    plt.xticks([36*i for i in range(5, 49, 5)], [str(i)+"h" for i in range(5, 49, 5)])
    plt.ylabel("Active trucks")
    plt.xlabel("Time")
    plt.show()


def plot_horizon_graph():
    data = [
        [0.057463351222432693, 0.059036393000914497, 0.056694839716180147, 0.056399157115988349, 0.056439944223751849,
         0.055695853150344934, 0.052869795633051185, 0.054202978366281608, 0.05322083246967961, 0.058611333065126246,
         0.065309122450540102, 0.071035237258772893, 0.072213641091798147, 0.054061354982495737, 0.063282100486091286,
         0.072619183410541147, 0.074149851317296372, 0.07196438389930078, 0.075722245474741712, 0.046813866634314125,
         0.04885040015671991, 0.049422128851719906, 0.052628053984963973, 0.049701747057740733, 0.050822896024898999],
        [0.049337502155298307, 0.051171327486487714, 0.053990831914989323, 0.053267131596031178, 0.058191763814852582,
         0.058907222846766992, 0.055069119953616144, 0.06329522604581958, 0.063034365132925901, 0.062295325634440936,
         0.064233807312181118, 0.061086526057268477, 0.054937630741398256, 0.056927003025765165, 0.048819854257713471,
         0.046173765060726214, 0.043666097057275491, 0.048958903117653406, 0.051679958304322635, 0.04442652697088114,
         0.044764023427686525, 0.041995874964247795, 0.040543109379787778, 0.040320084177484984, 0.048999469128014561],
        [0.029838375455405419, 0.030685489899607777, 0.031853124745449768, 0.032197305957196609, 0.021590494975833319,
         0.021796822049104027, 0.020383944758404327, 0.021609425128717729, 0.022872694733307421, 0.020792998875457692,
         0.020319507081133038, 0.020973588005691511, 0.02556243447467068, 0.022206057924025989, 0.023372772408666243,
         0.019566707324674183, 0.025857168051983081, 0.017142117494064225, 0.009086673378310239, -0.001907946392787374,
         -0.0029304693230246537, -0.01083545444484817, -0.013656726744048409, -0.016297708249674893,
         -0.017824910401873995],
        [0.030830699278287944, 0.031669474631220274, 0.027576897828476322, 0.023929535852571404, 0.021834309935192107,
         0.021127289094253855, 0.019749112173768846, 0.019595846800462603, 0.020395923790386194, 0.014569565987057253,
         0.0098536274091331148, 0.006193081032614867, -0.00073389270612738149, -0.00077407784060286029,
         -0.0071663249161374011, -0.0078434638188133558, -0.011442284026782112, -0.0066784608770143142,
         -0.0060453849226617343, -0.0085265930631736493, -0.016058013643575463, -0.024327690255191724,
         -0.024867616426322004, -0.0043541137198484185, -0.0049505910452841027]]
    x = range(len(data[0]))
    plt.plot(x, data[0])
    plt.plot(x, data[1])
    plt.plot(x, data[2])
    plt.plot(x, data[3])
    plt.plot((-10, 27), (0, 0), 'k-')
    plt.xlim([0,24])
    plt.title("Impact of horizon length")
    plt.ylabel("Fuel savings")
    plt.xlabel("Horizon length")
    plt.xticks([6, 12, 18, 24], ["30m", "1h", "1.5h", "2h"])

    plt.legend(['Greedy', 'Random', "Deterministic\nsub modularity", "Stochastic\nsub modularity"], loc='lower left')
    plt.show()


def plot_interval_graph():
    data = [
        [0.059491741164104807, 0.05753346297143893, 0.053109184895046548, 0.05445970587637472, 0.051873982871043813,
         0.047504142699179616, 0.048597570415217818, 0.040896007769472956, 0.041891241466456688, 0.040999735255316617,
         0.04687738967120765, 0.023338683938499229, 0.02388152553340046, 0.027819663148244866, 0.024177397861502747,
         0.022935104564690788, 0.025609974160623251, 0.027915339161547738, 0.028779758221415742, 0.0234007075269403,
         0.024318028272158343, 0.025745163107280811, 0.020591215998015056, 0.0011753075707874982],
        [0.050045491671149425, 0.049241236570515087, 0.046545868754859332, 0.046428060265562697, 0.042251306924563914,
         0.041380218564449157, 0.042473998551923041, 0.034627574123089852, 0.036692086928836652, 0.041572773434852571,
         0.035694766845292138, 0.022996383226242978, 0.024201698971822717, 0.023622718360101748, 0.024705395423577414,
         0.022106752251863891, 0.02581216940459783, 0.026133010593137107, 0.025589393294597106, 0.023881925558824534,
         0.025614915893607315, 0.02465759333645532, 0.017279401331244459, -0.00085598528582997435],
        [0.032144600829090722, 0.032246744966716402, 0.028630837843573675, 0.028563788203397378, 0.028084570804850849,
         0.025846096385087992, 0.030777492404150487, 0.017900636053097597, 0.020737919582522558, 0.024311184208470959,
         0.027346636375693744, 0.012913366102338175, 0.015579553585520656, 0.015438742992053233, 0.014862436183799854,
         0.014185442331025033, 0.016846450380512069, 0.016134665921793755, 0.016495693925089604, 0.016104623541231478,
         0.017131074955502389, 0.014492875281547768, 0.014559477901262108, -0.0044318319305520996],
        [0.030523579093526453, 0.027785932320920925, 0.025092237674956185, 0.022734016153557191, 0.020700690452542414,
         0.023353633791003414, 0.023350311529214851, 0.013774437638573755, 0.023289528785077951, 0.023517799259906248,
         0.020713382943875681, 0.0077357894098728733, 0.0091546255443295532, 0.012067799772742549, 0.010238067804763218,
         0.011456137774903263, 0.01491147068310259, 0.018158650398966514, 0.018932306278165934, 0.018007843979016357,
         0.012982048804000668, 0.014753927257883182, 0.0091602622196682807, 0.00057093880282301781]]
    x = range(len(data[0]))
    a = plt.plot(x, data[0])
    b = plt.plot(x, data[1])
    c = plt.plot(x, data[2])
    d = plt.plot(x, data[3])
    plt.plot((-10, 27), (0, 0), 'k-')
    plt.xlim([0,23])
    plt.ylim([0, 0.06])
    plt.title("Impact of interval length")
    plt.ylabel("Fuel savings")
    plt.xlabel("Interval length")
    plt.xticks([0, 5, 11, 17, 23], ["5m", "30m", "1h", "1.5h", "2h"])

    plt.legend(['Greedy', 'Random', "Deterministic\nsub modularity", "Stochastic\nsub modularity"])
    plt.show()


def plot_clustering_savings_graph():
    # y = clustering_data()
    y = [0.031303814444070287, 0.026728620753722843, 0.029085513454732204, 0.027236387459671961]
    labels = ["3.1%", "2.7%", "2.9%", "2.7%"]
    N = len(y)
    x = range(N)
    # ["a","b","c","d"]
    width = 1 / 1.5
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']
    bars = plt.bar(x, y, width, alpha=0.8, color=colors)
    for a, b in zip(x, y):
        plt.text(a, b + 0.005, labels[a], ha='center', va='bottom')
    # plt.tight_layout()
    plt.ylim([0, 0.1])
    plt.title("Clustering methods")
    plt.ylabel("Fuel savings")
    # plt.xlabel("Method")
    # plt.set_xticklabels()
    labels2 = ["Greedy", "Random", "Deterministic\nsub modularity", "Stochastic\nsub modularity"]
    plt.xticks(x, labels2)  # , rotation='vertical')
    plt.show()


if __name__ == "__main__":
    main()
