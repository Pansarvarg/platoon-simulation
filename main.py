import cProfile
import time

from platooning.platooning_methods import GreedyPlatooning, RandomPlatooning, SubModularityPlatooning
from route_calculation import get_path_data_sets, generate_routes
from run_simulation import dynamic_simulation, average_fuel_savings
import matplotlib.pyplot as plt
import numpy as np


start = 0
pr = None
def setUp():
    global start
    global pr
    start = time.time()
    pr = cProfile.Profile()
    pr.disable()
    pr.enable()


def tearDown():
    pr.disable()
    pr.dump_stats("profile.pstat")
    t = time.time() - start
    print "%s: %.3f" % ("Time", t)


def main():
    setUp()
    # plot_bar_graph()
    # plot_expected_graph()
    # plot_bar_graph()
    # generate_routes(200, './testing/testroutes/test200-1/')
    # path_data = get_path_data_sets('./testing/testroutes/test200-1/')
    result = dynamic_simulation(GreedyPlatooning(), folder='./testing/testroutes/test200-1/')
    # print sum([x.current_fuel_consumption() for x in result]) / sum([x.default_plan.fuel for x in result])
    tearDown()


def horizon_data():
    savings = []
    for horizon in range(0, 7210, 300):
        print "%d/7200" % horizon
        fuel_savings = average_fuel_savings(SubModularityPlatooning(False),
                                            ['./testing/testroutes/test100-1/', './testing/testroutes/test100-2/',
                                             './testing/testroutes/test100-3/', './testing/testroutes/test100-4/',
                                             './testing/testroutes/test100-5/'], horizon)
        savings.append(fuel_savings)
        print fuel_savings
    print savings


def interval_data():
    savings = []
    for interval in range(300, 7210, 300):
        print "%d/7200" % interval
        fuel_savings = average_fuel_savings(SubModularityPlatooning(False),
                                            ['./testing/testroutes/test100-1/', './testing/testroutes/test100-2/',
                                             './testing/testroutes/test100-3/', './testing/testroutes/test100-4/',
                                             './testing/testroutes/test100-5/'], interval=interval)
        savings.append(fuel_savings)
        print fuel_savings
    print savings


def plot_expected_graph():
    data = [11909.442656270539, 11909.442656270539, 11909.442656270539, 11909.442656270539, 11909.442656270539, 11909.442656270539, 11909.442656270539, 11909.442656270539, 11909.442656270539, 11908.821028215301, 11908.647548926105, 11908.59804580005, 11908.577382819683, 11918.552946060145, 11918.375313895745, 11918.317720576606, 11918.172558358288, 11918.153299520522, 11918.114559434811, 11900.495225269013, 11901.265502012526, 11904.352813047841, 11903.825131539499, 11910.690228739031, 11890.75621891944, 11887.598327739608, 11886.85374805788, 11885.775161158001, 11892.586163128037, 11883.747417251469, 11870.134971573838, 11825.75939053704, 11817.886341560707, 11816.61395161471, 11794.751139845472, 11794.516229395793, 11789.29188864842, 11753.945099858847, 11753.846954438275, 11751.870611204138, 11731.60785087612, 11687.592620646397, 11686.295805648251, 11682.127979596375, 11682.108371413109, 11659.048871555102, 11655.269713277386, 11652.813259638986, 11647.39711154955, 11631.541495177011, 11626.681023625508, 11626.59843177949, 11631.669016221189, 11630.128335760481, 11625.662936034827, 11624.596375345458, 11622.368354716828, 11594.224778599912, 11593.816511837325, 11570.686373830569, 11561.977764953483, 11557.976368376365, 11555.565455492222, 11554.745083596732, 11554.751418697997, 11558.690135135344, 11545.956726761906, 11522.441804529357, 11497.586085127756, 11498.033933641131, 11528.938929372174, 11526.399705904065, 11482.560831739391, 11485.343572447713, 11521.742672717686, 11508.83812975818, 11498.875217645562, 11482.223408802429, 11430.187319817185, 11425.967787308151, 11391.341319716206, 11383.833891937829, 11386.362374659095, 11363.664427769181, 11345.744359695744, 11315.926770046985, 11274.13219638937, 11203.12794002977, 11198.494478751965, 11195.861702386865, 11193.247591583297, 11192.6256636045, 11188.571264580634, 11149.373853350498, 11138.031001203561, 11137.384960388275, 11065.459629409839, 11097.732345022738, 11097.184400336177, 11086.297990720852]
    x = range(len(data))
    plt.plot(x, data)
    plt.plot(x, [11909.4426563] * len(data))
    # plt.plot(x, [11448.5257358] * len(data))


    plt.ylim([0, 13000])
    plt.ylabel("Expected fuel consumption")
    plt.xlabel("Time")
    plt.legend(['Adapted plans', 'Default plan'])
    plt.show()


def plot_horizon_graph():
    data = [
        [0.057463351222432693, 0.059036393000914497, 0.056694839716180147, 0.056399157115988349, 0.056439944223751849,
         0.055695853150344934, 0.052869795633051185, 0.054202978366281608, 0.05322083246967961, 0.058611333065126246,
         0.065309122450540102, 0.071035237258772893, 0.072213641091798147, 0.054061354982495737, 0.063282100486091286,
         0.072619183410541147, 0.074149851317296372, 0.07196438389930078, 0.075722245474741712, 0.046813866634314125,
         0.04885040015671991, 0.049422128851719906, 0.052628053984963973, 0.049701747057740733, 0.050822896024898999],
        [0.049337502155298307, 0.051171327486487714, 0.053990831914989323, 0.053267131596031178, 0.058191763814852582,
         0.058907222846766992, 0.055069119953616144, 0.06329522604581958, 0.063034365132925901, 0.062295325634440936,
         0.064233807312181118, 0.061086526057268477, 0.054937630741398256, 0.056927003025765165, 0.048819854257713471,
         0.046173765060726214, 0.043666097057275491, 0.048958903117653406, 0.051679958304322635, 0.04442652697088114,
         0.044764023427686525, 0.041995874964247795, 0.040543109379787778, 0.040320084177484984, 0.048999469128014561],
        [0.029838375455405419, 0.030685489899607777, 0.031853124745449768, 0.032197305957196609, 0.021590494975833319,
         0.021796822049104027, 0.020383944758404327, 0.021609425128717729, 0.022872694733307421, 0.020792998875457692,
         0.020319507081133038, 0.020973588005691511, 0.02556243447467068, 0.022206057924025989, 0.023372772408666243,
         0.019566707324674183, 0.025857168051983081, 0.017142117494064225, 0.009086673378310239, -0.001907946392787374,
         -0.0029304693230246537, -0.01083545444484817, -0.013656726744048409, -0.016297708249674893,
         -0.017824910401873995],
        [0.030830699278287944, 0.031669474631220274, 0.027576897828476322, 0.023929535852571404, 0.021834309935192107,
         0.021127289094253855, 0.019749112173768846, 0.019595846800462603, 0.020395923790386194, 0.014569565987057253,
         0.0098536274091331148, 0.006193081032614867, -0.00073389270612738149, -0.00077407784060286029,
         -0.0071663249161374011, -0.0078434638188133558, -0.011442284026782112, -0.0066784608770143142,
         -0.0060453849226617343, -0.0085265930631736493, -0.016058013643575463, -0.024327690255191724,
         -0.024867616426322004, -0.0043541137198484185, -0.0049505910452841027]]
    x = range(len(data[0]))
    plt.plot(x, data[0])
    plt.plot(x, data[1])
    plt.plot(x, data[2])
    plt.plot(x, data[3])
    plt.plot((-10, 27), (0, 0), 'k-')
    plt.xlim([0,24])
    plt.title("Impact of horizon length")
    plt.ylabel("Fuel savings")
    plt.xlabel("Horizon length")
    plt.xticks([6, 12, 18, 24], ["30m", "1h", "1.5h", "2h"])

    plt.legend(['Greedy', 'Random', "Deterministic\nsub modularity", "Stochastic\nsub modularity"], loc='lower left')
    plt.show()


def plot_interval_graph():
    data = [
        [0.059491741164104807, 0.05753346297143893, 0.053109184895046548, 0.05445970587637472, 0.051873982871043813,
         0.047504142699179616, 0.048597570415217818, 0.040896007769472956, 0.041891241466456688, 0.040999735255316617,
         0.04687738967120765, 0.023338683938499229, 0.02388152553340046, 0.027819663148244866, 0.024177397861502747,
         0.022935104564690788, 0.025609974160623251, 0.027915339161547738, 0.028779758221415742, 0.0234007075269403,
         0.024318028272158343, 0.025745163107280811, 0.020591215998015056, 0.0011753075707874982],
        [0.050045491671149425, 0.049241236570515087, 0.046545868754859332, 0.046428060265562697, 0.042251306924563914,
         0.041380218564449157, 0.042473998551923041, 0.034627574123089852, 0.036692086928836652, 0.041572773434852571,
         0.035694766845292138, 0.022996383226242978, 0.024201698971822717, 0.023622718360101748, 0.024705395423577414,
         0.022106752251863891, 0.02581216940459783, 0.026133010593137107, 0.025589393294597106, 0.023881925558824534,
         0.025614915893607315, 0.02465759333645532, 0.017279401331244459, -0.00085598528582997435],
        [0.032144600829090722, 0.032246744966716402, 0.028630837843573675, 0.028563788203397378, 0.028084570804850849,
         0.025846096385087992, 0.030777492404150487, 0.017900636053097597, 0.020737919582522558, 0.024311184208470959,
         0.027346636375693744, 0.012913366102338175, 0.015579553585520656, 0.015438742992053233, 0.014862436183799854,
         0.014185442331025033, 0.016846450380512069, 0.016134665921793755, 0.016495693925089604, 0.016104623541231478,
         0.017131074955502389, 0.014492875281547768, 0.014559477901262108, -0.0044318319305520996],
        [0.030523579093526453, 0.027785932320920925, 0.025092237674956185, 0.022734016153557191, 0.020700690452542414,
         0.023353633791003414, 0.023350311529214851, 0.013774437638573755, 0.023289528785077951, 0.023517799259906248,
         0.020713382943875681, 0.0077357894098728733, 0.0091546255443295532, 0.012067799772742549, 0.010238067804763218,
         0.011456137774903263, 0.01491147068310259, 0.018158650398966514, 0.018932306278165934, 0.018007843979016357,
         0.012982048804000668, 0.014753927257883182, 0.0091602622196682807, 0.00057093880282301781]]
    x = range(len(data[0]))
    a = plt.plot(x, data[0])
    b = plt.plot(x, data[1])
    c = plt.plot(x, data[2])
    d = plt.plot(x, data[3])
    plt.plot((-10, 27), (0, 0), 'k-')
    plt.xlim([0,23])
    plt.ylim([0, 0.06])
    plt.title("Impact of interval length")
    plt.ylabel("Fuel savings")
    plt.xlabel("Interval length")
    plt.xticks([0, 5, 11, 17, 23], ["5m", "30m", "1h", "1.5h", "2h"])

    plt.legend(['Greedy', 'Random', "Deterministic\nsub modularity", "Stochastic\nsub modularity"])
    plt.show()


def plot_bar_graph():
    y = [0.0574633512, 0.0493375022, 0.0298383755, 0.0308306993]
    labels = ["5.7%", "4.9%", "3.0%", "3.1%"]
    N = len(y)
    x = range(N)
    # ["a","b","c","d"]
    width = 1 / 1.5
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']
    bars = plt.bar(x, y, width, alpha=0.8, color=colors)
    for a, b in zip(x, y):
        plt.text(a, b + 0.005, labels[a], ha='center', va='bottom')
    # plt.tight_layout()
    plt.ylim([0, 0.15])
    plt.title("Clustering methods")
    plt.ylabel("Fuel savings")
    # plt.xlabel("Method")
    # plt.set_xticklabels()
    labels2 = ["Greedy", "Random", "Deterministic\nsub modularity", "Stochastic\nsub modularity"]
    plt.xticks(x, labels2)  # , rotation='vertical')
    plt.show()


if __name__ == "__main__":
    main()
