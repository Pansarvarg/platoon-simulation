import cProfile
import time

from platooning.platooning_methods import GreedyPlatooning, RandomPlatooning, SubModularityPlatooning
from route_calculation import get_path_data_sets, generate_routes
from run_simulation import dynamic_simulation, average_fuel_savings
import matplotlib.pyplot as plt
import numpy as np


start = 0
pr = None
def setup():
    global start
    global pr
    start = time.time()
    pr = cProfile.Profile()
    pr.disable()
    pr.enable()


def tear_down():
    pr.disable()
    pr.dump_stats("profile.pstat")
    t = time.time() - start
    print "%s: %.3f" % ("Time", t)


def main():
    setup()
    # generate_routes(400, './testing/testroutes/test400-3/')
    # generate_routes(400, './testing/testroutes/test400-4/')
    # generate_routes(400, './testing/testroutes/test400-5/')
    # plot_clustering_savings_graph()
    # result = dynamic_simulation(GreedyPlatooning(), folder='./testing/testroutes/test400-2/')
    # print clustering_data()
    # print horizon_data()
    # print sum([x.current_fuel_consumption() for x in result]) / sum([x.default_plan.fuel for x in result])
    # plot_active_graph()
    plot_expected_graph()
    tear_down()


def clustering_data():
    fuel_savings = []
    for method in [GreedyPlatooning(), RandomPlatooning(0), SubModularityPlatooning(True), SubModularityPlatooning(False)]:
        fuel_savings.append(average_fuel_savings(method,
                                                 ['./testing/testroutes/test400-1/', './testing/testroutes/test400-2/',
                                                  './testing/testroutes/test400-3/', './testing/testroutes/test400-4/',
                                                  './testing/testroutes/test400-5/']))
        print fuel_savings
    return fuel_savings

def horizon_data():
    total = []
    for method in [GreedyPlatooning(), RandomPlatooning(0), SubModularityPlatooning(True), SubModularityPlatooning(False)]:
        savings = []
        for horizon in range(0, 7210, 300):
            print "%d/7200" % horizon
            fuel_savings = average_fuel_savings(method,
                                                ['./testing/testroutes/test400-1/', './testing/testroutes/test400-2/',
                                                 './testing/testroutes/test400-3/', './testing/testroutes/test400-4/',
                                                 './testing/testroutes/test400-5/'], horizon)
            savings.append(fuel_savings)
            print fuel_savings
        print savings
        total.append(savings)
    print total
    return total


def interval_data():
    savings = []
    for interval in range(300, 7210, 300):
        print "%d/7200" % interval
        fuel_savings = average_fuel_savings(SubModularityPlatooning(False),
                                            ['./testing/testroutes/test100-1/', './testing/testroutes/test100-2/',
                                             './testing/testroutes/test100-3/', './testing/testroutes/test100-4/',
                                             './testing/testroutes/test100-5/'], interval=interval)
        savings.append(fuel_savings)
        print fuel_savings
    print savings


def plot_expected_graph():
    data = [53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53872.379664897788, 53867.192563844685, 53867.192563844685, 53867.192563844685, 53867.192563844685, 53867.192563844685, 53846.783441669657, 53846.783441669657, 53824.277902666145, 53814.551958795681, 53814.551958795681, 53814.551958795681, 53795.785558770222, 53795.785558770222, 53795.785558770222, 53814.168509612879, 53780.260601360103, 53782.424260650077, 53782.424260650077, 53782.424260650077, 53743.439436640183, 53743.439436640183, 53743.439436640183, 53736.678550582466, 53728.164648368445, 53667.106492498802, 53667.106492498802, 53657.920025967294, 53657.920025967294, 53657.920025967294, 53658.441933904964, 53658.037938735841, 53651.382066520251, 53661.293788877199, 53661.293788877199, 53661.293788877199, 53634.379054263976, 53634.379054263976, 53641.001849055683, 53637.756600821696, 53630.915268453624, 53607.236841689359, 53607.236841689359, 53596.601323662893, 53592.149446257259, 53592.149446257259, 53592.149446257259, 53592.120907539211, 53571.59819987521, 53571.59819987521, 53536.449306837589, 53536.449306837589, 53529.772791797179, 53561.56136500735, 53546.601313063147, 53527.955434956646, 53524.055591989541, 53468.169314307263, 53475.903788646159, 53475.903788646159, 53475.903788646159, 53475.903788646159, 53475.903788646159, 53435.19357781639, 53363.347080173087, 53363.347080173087, 53354.6863701892, 53371.200213219083, 53404.689975126661, 53398.171258690883, 53382.040534584565, 53382.040534584565, 53364.161930004804, 53322.937705890145, 53328.667406842505, 53307.928454379857, 53300.913110831258, 53300.913110831258, 53300.913110831258, 53300.104638977034, 53294.966073693009, 53294.966073693009, 53294.966073693009, 53292.188316932894, 53278.174517069114, 53298.485509338861, 53190.150497877417, 53179.320884012443, 53179.320884012443, 53187.623342493418, 53179.325408373683, 53176.936300937276, 53176.936300937276, 53176.936300937276, 53160.878011521476, 53141.17091767129, 53145.860703342318, 53142.61574003064, 53132.489357422804, 53101.839416483621, 53101.839416483621, 53089.198196835874, 53063.707056245941, 53063.707056245941, 53067.532851023789, 53067.346920654658, 53049.423014838569, 53025.033100876957, 53006.387443190804, 53006.283688786905, 53006.283688786905, 53006.283688786905, 53006.283688786905, 53006.283688786905, 52986.274865307118, 52979.978601269991, 52979.978601269991, 52979.978601269991, 52979.978601269991, 52974.743832376364, 52974.743832376364, 52974.743832376364, 52972.312770233242, 52972.312770233242, 52974.481603815191, 52937.911350679977, 52937.911350679977, 52937.911350679977, 52932.262627931996, 52936.999892563486, 52903.588548469372, 52900.250016982289, 52900.250016982289, 52900.250016982289, 52900.250016982289, 52888.946824489816, 52888.946824489816, 52860.50292072368, 52849.912892522101, 52862.854493106337, 52850.28074560019, 52847.3843386964, 52847.3843386964, 52853.677178279773, 52836.338871218686, 52829.932593562131, 52818.460102362267, 52817.832956873768, 52817.396143596226, 52777.692293511544, 52777.692293511544, 52777.692293511544, 52781.549827174036, 52741.812161089154, 52722.293090746462, 52729.599474234492, 52723.675213755763, 52720.522177352876, 52720.522177352876, 52737.428851571007, 52739.618707268877, 52739.618707268877, 52739.618707268877, 52739.618707268877, 52731.667678958547, 52731.667678958547, 52731.667678958547, 52731.667678958547, 52737.581311515256, 52731.796508166401, 52721.391758203783, 52721.391758203783, 52688.56302979996, 52679.891069997277, 52679.891069997277, 52697.522516613884, 52660.54303216438, 52659.85444079584, 52655.208896075332, 52655.208896075332, 52657.802014475499, 52646.262348903212, 52646.262348903212, 52645.253165520509, 52645.253165520509, 52647.110963196566, 52636.694760329119, 52602.813946581402, 52580.873625689841, 52578.490692946449, 52570.750394232775, 52560.951400816455, 52561.544467482119, 52524.28529493403, 52505.556917226801, 52505.556917226801, 52443.082698072656, 52427.189993596054, 52400.093372294781, 52340.179274139082, 52338.281841072981, 52338.281841072981, 52338.281841072981, 52338.281841072981, 52378.980076337291, 52359.255540180558, 52322.085278555212, 52322.085278555212, 52318.046860445873, 52318.046860445873, 52318.046860445873, 52313.70808612465, 52313.70808612465, 52264.594058306597, 52264.29631817319, 52257.985446085804, 52238.048109881885, 52238.048109881885, 52238.048109881885, 52234.743171061156, 52234.743171061156, 52223.587228233577, 52223.587228233577, 52200.179901678493, 52194.308641990792, 52194.308641990792, 52169.240160143832, 52169.240160143832, 52175.723629873552, 52175.723629873552, 52156.597349822026, 52095.320351876202, 52095.320351876202, 52093.227102821242, 52109.804905157172, 52109.804905157172, 52115.850920577679, 52115.850920577679, 52115.850920577679, 52107.462289083443, 52108.546917477099, 52110.666707252836, 52104.424565628171, 52106.116629867553, 52104.541128255383, 52090.741133123462, 52050.908135418096, 52016.974111453907, 52028.015792120335, 52026.318936206328, 52024.629276560197, 52024.629276560197, 52011.071156916878, 52011.071156916878, 52011.071156916878, 52011.071156916878, 52011.071156916878, 52011.071156916878, 52011.071156916878, 52011.071156916878, 52011.071156916878, 52011.071156916878, 52011.071156916878, 52016.338075373802, 52016.338075373802, 52016.338075373802, 52016.338075373802, 52016.338075373802, 52013.437931924665, 52013.437931924665, 52009.198497197227, 51996.159060772727, 51996.159060772727, 51996.159060772727, 51993.553764238997, 51947.159392857066, 51939.658320058064, 51907.893310990534, 51911.903543720604, 51911.903543720604, 51907.382919640368, 51874.745020766743, 51877.605369214376, 51877.605369214376, 51877.503386575598, 51877.505946437464, 51863.271999980294, 51862.571823163933, 51862.571823163933, 51854.846402279814, 51847.366027680531, 51847.366027680531, 51847.366027680531, 51851.234067537007, 51839.248367531385, 51800.889031840241, 51800.889031840241, 51800.889031840241, 51800.889031840241, 51800.889031840241, 51800.889031840241, 51789.585555617756, 51789.585555617756, 51789.585555617756, 51789.585555617756, 51788.265501988091, 51788.265501988091, 51739.55330129416, 51739.55330129416, 51739.55330129416, 51734.033197439217, 51691.00590872654, 51691.00590872654, 51691.00590872654, 51691.00590872654, 51693.376528603883, 51693.376528603883, 51693.376528603883, 51693.376528603883, 51678.099504136015, 51667.883555702385, 51690.828685213244, 51684.20406250318, 51684.20406250318, 51639.217191174263, 51639.217191174263, 51626.943743788783, 51612.141462000756, 51585.418390484308, 51585.418390484308, 51585.418390484308, 51585.418390484308, 51581.032894617645, 51581.73142037417, 51581.73142037417, 51581.73142037417, 51558.393543797501, 51560.544857399742, 51551.753062539487, 51516.362553108367, 51516.362553108367, 51502.554576394323, 51512.741567298028, 51512.741567298028, 51446.03210143793, 51446.03210143793, 51446.03210143793, 51446.03210143793, 51446.03210143793, 51446.03210143793, 51446.03210143793, 51446.03210143793, 51425.41055086632, 51425.41055086632, 51416.736719644337, 51388.976558034839, 51388.976558034839, 51388.976558034839, 51372.673341938156, 51364.395486436253, 51364.395486436253, 51345.949738450297, 51345.949738450297, 51342.656858998736, 51342.656858998736, 51332.43701758657, 51330.516627026846, 51306.449647577174, 51295.098609960856, 51290.46283370466, 51290.46283370466, 51290.46283370466, 51290.46283370466, 51290.318994292771, 51290.318994292771, 51251.671522783414, 51251.671522783414, 51241.048499572848, 51237.627904390254, 51237.636241305183, 51220.748410667671, 51220.512604611067, 51218.460679978016, 51211.717266575572, 51169.649482518755, 51124.944292846812, 51117.044452485847, 51098.994306271394, 51099.966752997738, 51087.646757625713, 51068.170585108543, 51062.062102087213]

    x = range(len(data))
    plt.plot(x, data)
    plt.plot(x, [data[0]] * len(data))
    # plt.plot(x, [11448.5257358] * len(data))

    plt.ylim([0, 55000])
    plt.ylabel("Expected fuel consumption")
    plt.xlabel("Time")
    plt.legend(['Adapted plans', 'Default plan'])
    plt.show()


def plot_active_graph():
    data = [0, 1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 31, 32, 31, 31, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 37, 38, 38, 38, 38, 38, 40, 41, 42, 42, 42, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 43, 43, 43, 43, 43, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 45, 45, 45, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 46, 47, 47, 48, 48, 49, 50, 51, 52, 53, 53, 53, 53, 52, 53, 53, 53, 54, 53, 53, 53, 53, 53, 53, 54, 54, 54, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 53, 53, 53, 55, 54, 54, 54, 54, 53, 52, 52, 52, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 54, 53, 53, 54, 54, 54, 53, 53, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 54, 53, 54, 55, 55, 54, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 54, 53, 53, 53, 52, 52, 52, 53, 53, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 52, 52, 51, 51, 52, 52, 55, 55, 55, 55, 56, 55, 55, 55, 55, 56, 56, 56, 57, 56, 56, 57, 57, 55, 55, 54, 54, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 53, 54, 54, 56, 58, 58, 58, 58, 57, 57, 57, 57, 57, 56, 56, 55, 56, 56, 56, 57, 56, 56, 56, 57, 57, 57, 56, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 61, 61, 61, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 63, 64, 63, 63, 63, 63, 63, 62, 62, 63, 63, 63, 64, 65, 64, 64, 64, 63, 63, 63, 63, 63, 64, 64, 66, 67, 67, 68, 68, 68, 68, 69, 68, 68, 67, 66, 66, 66, 64, 64, 64, 63, 64, 64, 63, 63, 63, 63, 63, 62, 61, 62, 61, 61, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 60, 60, 60, 61, 62, 62, 61, 60, 60, 60, 61, 60, 60, 60, 60, 60, 60, 60, 62, 62, 62, 62, 60, 62, 62, 64, 63, 64, 64, 65, 64, 64, 63, 63, 63, 63, 62, 62, 63, 63, 63, 63, 64, 64, 64, 64, 64, 62, 61, 61, 63, 64, 65, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 66, 66, 66, 66, 66, 66, 66, 66, 65, 66, 66, 65, 65, 66, 67, 67, 67, 67, 67, 67, 66, 65, 65, 64, 65, 65, 65, 65, 64, 63, 62, 64, 64, 64, 64, 63, 63, 63, 61, 61, 62, 61, 61, 61, 61, 61, 60, 60, 60, 59, 58, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 61, 61, 62, 62, 62, 62, 61, 62, 62, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63, 63, 63, 63, 63, 63, 62, 62, 62, 65, 65, 65, 65, 66, 67, 68, 68, 67, 67, 67, 67, 66, 67, 67, 67, 66, 66, 67, 66, 66, 66, 64, 64, 63, 63, 64, 64, 64, 64, 65, 65, 66, 66, 65, 66, 65, 66, 66, 69, 70, 71, 71, 72, 72, 72, 73, 73, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 73, 73, 74, 75, 75, 74, 74, 74, 75, 76, 76, 75, 75, 75, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 76, 76, 75, 75, 75, 75, 75, 75, 75, 73, 73, 71, 71, 71, 71, 71, 71, 72, 71, 70, 69, 69, 70, 71, 70, 68, 68, 68, 68, 67, 66, 66, 67, 67, 67, 67, 66, 67, 67, 67, 66, 67, 68, 68, 68, 68, 68, 68, 66, 66, 67, 66, 65, 65, 66, 65, 65, 65, 65, 65, 65, 65, 65, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 64, 64, 64, 64, 64, 64, 63, 63, 63, 63, 63, 63, 64, 65, 65, 65, 65, 65, 65, 67, 67, 66, 66, 66, 66, 66, 65, 65, 64, 65, 65, 65, 64, 64, 63, 65, 66, 66, 67, 67, 66, 66, 66, 65, 65, 65, 64, 64, 65, 65, 65, 64, 63, 64, 64, 65, 65, 64, 64, 65, 65, 65, 65, 63, 62, 62, 62, 64, 64, 63, 63, 63, 64, 64, 64, 64, 63, 63, 63, 63, 63, 63, 62, 62, 62, 62, 62, 62, 62, 61, 60, 60, 60, 60, 61, 61, 61, 61, 60, 60, 60, 58, 57, 58, 58, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 59, 58, 58, 58, 58, 57, 57, 57, 56, 56, 56, 56, 56, 56, 56, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 55, 55, 55, 54, 54, 55, 55, 54, 53, 53, 53, 53, 52, 52, 52, 52, 52, 51, 50, 50, 49, 49, 49, 49, 49, 49, 50, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 53, 53, 53, 54, 54, 55, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 54, 54, 54, 55, 55, 56, 56, 56, 56, 56, 56, 55, 56, 56, 56, 56, 56, 56, 56, 57, 57, 56, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 56, 55, 55, 55, 54, 54, 55, 54, 54, 54, 54, 54, 56, 56, 56, 56, 56, 56, 57, 57, 57, 56, 56, 56, 56, 56, 56, 55, 56, 56, 56, 55, 55, 55, 55, 54, 54, 53, 53, 53, 54, 54, 54, 54, 54, 55, 55, 55, 56, 57, 58, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 57, 57, 56, 56, 55, 56, 56, 57, 56, 56, 57, 57, 58, 58, 58, 58, 56, 55, 54, 54, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 58, 58, 57, 57, 58, 58, 59, 59, 59, 59, 59, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 60, 60, 59, 59, 58, 58, 59, 60, 60, 60, 60, 59, 58, 57, 57, 57, 58, 58, 58, 58, 57, 57, 57, 57, 57, 57, 57, 56, 56, 56, 55, 54, 55, 56, 57, 57, 57, 56, 57, 57, 57, 57, 58, 59, 57, 56, 56, 55, 54, 54, 54, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52, 53, 53, 54, 55, 55, 55, 55, 55, 55, 55, 55, 56, 55, 55, 55, 54, 56, 57, 58, 59, 59, 59, 59, 58, 57, 57, 56, 56, 56, 56, 56, 55, 56, 57, 58, 58, 58, 58, 58, 58, 58, 58, 57, 56, 56, 56, 56, 57, 57, 57, 56, 57, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 56, 55, 54, 54, 54, 54, 54, 54, 54, 54, 53, 52, 52, 52, 52, 52, 52, 53, 52, 52, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 51, 52, 53, 53, 54, 54, 54, 54, 55, 55, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 58, 59, 59, 59, 59, 60, 60, 60, 60, 59, 62, 62, 61, 62, 62, 61, 61, 61, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 59, 59, 58, 58, 58, 58, 58, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 59, 59, 58, 57, 57, 57, 56, 55, 55, 55, 55, 55, 54, 54, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 56, 57, 56, 57, 56, 56, 55, 55, 56, 57, 57, 56, 54, 55, 55, 55, 55, 55, 55, 55, 55, 54, 54, 51, 51, 51, 51, 51, 51, 51, 51, 50, 49, 49, 49, 48, 48, 48, 48, 48, 48, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 51, 51, 51, 51, 50, 49, 49, 49, 49, 50, 48, 48, 48, 48, 48, 48, 47, 47, 45, 45, 45, 46, 46, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 49, 50, 50, 49, 49, 49, 49, 49, 49, 49, 49, 50, 49, 49, 49, 49, 47, 47, 47, 48, 48, 49, 48, 48, 47, 47, 46, 46, 46, 47, 47, 48, 48, 49, 50, 50, 51, 52, 53, 52, 53, 54, 54, 54, 54, 54, 54, 54, 54, 52, 53, 53, 53, 54, 54, 54, 54, 54, 55, 55, 54, 54, 55, 56, 56, 56, 56, 56, 55, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 55, 55, 55, 55, 56, 56, 56, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 53, 53, 53, 53, 54, 54, 52, 52]
    x = range(len(data))
    plt.plot(x, data)
    # plt.plot(x, [11448.5257358] * len(data))

    plt.xticks([36*i for i in range(5, 49, 5)], [str(i)+"h" for i in range(5, 49, 5)])
    plt.ylabel("Active trucks")
    plt.xlabel("Time")
    plt.show()


def plot_horizon_graph():
    data = [
        [0.057463351222432693, 0.059036393000914497, 0.056694839716180147, 0.056399157115988349, 0.056439944223751849,
         0.055695853150344934, 0.052869795633051185, 0.054202978366281608, 0.05322083246967961, 0.058611333065126246,
         0.065309122450540102, 0.071035237258772893, 0.072213641091798147, 0.054061354982495737, 0.063282100486091286,
         0.072619183410541147, 0.074149851317296372, 0.07196438389930078, 0.075722245474741712, 0.046813866634314125,
         0.04885040015671991, 0.049422128851719906, 0.052628053984963973, 0.049701747057740733, 0.050822896024898999],
        [0.049337502155298307, 0.051171327486487714, 0.053990831914989323, 0.053267131596031178, 0.058191763814852582,
         0.058907222846766992, 0.055069119953616144, 0.06329522604581958, 0.063034365132925901, 0.062295325634440936,
         0.064233807312181118, 0.061086526057268477, 0.054937630741398256, 0.056927003025765165, 0.048819854257713471,
         0.046173765060726214, 0.043666097057275491, 0.048958903117653406, 0.051679958304322635, 0.04442652697088114,
         0.044764023427686525, 0.041995874964247795, 0.040543109379787778, 0.040320084177484984, 0.048999469128014561],
        [0.029838375455405419, 0.030685489899607777, 0.031853124745449768, 0.032197305957196609, 0.021590494975833319,
         0.021796822049104027, 0.020383944758404327, 0.021609425128717729, 0.022872694733307421, 0.020792998875457692,
         0.020319507081133038, 0.020973588005691511, 0.02556243447467068, 0.022206057924025989, 0.023372772408666243,
         0.019566707324674183, 0.025857168051983081, 0.017142117494064225, 0.009086673378310239, -0.001907946392787374,
         -0.0029304693230246537, -0.01083545444484817, -0.013656726744048409, -0.016297708249674893,
         -0.017824910401873995],
        [0.030830699278287944, 0.031669474631220274, 0.027576897828476322, 0.023929535852571404, 0.021834309935192107,
         0.021127289094253855, 0.019749112173768846, 0.019595846800462603, 0.020395923790386194, 0.014569565987057253,
         0.0098536274091331148, 0.006193081032614867, -0.00073389270612738149, -0.00077407784060286029,
         -0.0071663249161374011, -0.0078434638188133558, -0.011442284026782112, -0.0066784608770143142,
         -0.0060453849226617343, -0.0085265930631736493, -0.016058013643575463, -0.024327690255191724,
         -0.024867616426322004, -0.0043541137198484185, -0.0049505910452841027]]
    x = range(len(data[0]))
    plt.plot(x, data[0])
    plt.plot(x, data[1])
    plt.plot(x, data[2])
    plt.plot(x, data[3])
    plt.plot((-10, 27), (0, 0), 'k-')
    plt.xlim([0,24])
    plt.title("Impact of horizon length")
    plt.ylabel("Fuel savings")
    plt.xlabel("Horizon length")
    plt.xticks([6, 12, 18, 24], ["30m", "1h", "1.5h", "2h"])

    plt.legend(['Greedy', 'Random', "Deterministic\nsub modularity", "Stochastic\nsub modularity"], loc='lower left')
    plt.show()


def plot_interval_graph():
    data = [
        [0.059491741164104807, 0.05753346297143893, 0.053109184895046548, 0.05445970587637472, 0.051873982871043813,
         0.047504142699179616, 0.048597570415217818, 0.040896007769472956, 0.041891241466456688, 0.040999735255316617,
         0.04687738967120765, 0.023338683938499229, 0.02388152553340046, 0.027819663148244866, 0.024177397861502747,
         0.022935104564690788, 0.025609974160623251, 0.027915339161547738, 0.028779758221415742, 0.0234007075269403,
         0.024318028272158343, 0.025745163107280811, 0.020591215998015056, 0.0011753075707874982],
        [0.050045491671149425, 0.049241236570515087, 0.046545868754859332, 0.046428060265562697, 0.042251306924563914,
         0.041380218564449157, 0.042473998551923041, 0.034627574123089852, 0.036692086928836652, 0.041572773434852571,
         0.035694766845292138, 0.022996383226242978, 0.024201698971822717, 0.023622718360101748, 0.024705395423577414,
         0.022106752251863891, 0.02581216940459783, 0.026133010593137107, 0.025589393294597106, 0.023881925558824534,
         0.025614915893607315, 0.02465759333645532, 0.017279401331244459, -0.00085598528582997435],
        [0.032144600829090722, 0.032246744966716402, 0.028630837843573675, 0.028563788203397378, 0.028084570804850849,
         0.025846096385087992, 0.030777492404150487, 0.017900636053097597, 0.020737919582522558, 0.024311184208470959,
         0.027346636375693744, 0.012913366102338175, 0.015579553585520656, 0.015438742992053233, 0.014862436183799854,
         0.014185442331025033, 0.016846450380512069, 0.016134665921793755, 0.016495693925089604, 0.016104623541231478,
         0.017131074955502389, 0.014492875281547768, 0.014559477901262108, -0.0044318319305520996],
        [0.030523579093526453, 0.027785932320920925, 0.025092237674956185, 0.022734016153557191, 0.020700690452542414,
         0.023353633791003414, 0.023350311529214851, 0.013774437638573755, 0.023289528785077951, 0.023517799259906248,
         0.020713382943875681, 0.0077357894098728733, 0.0091546255443295532, 0.012067799772742549, 0.010238067804763218,
         0.011456137774903263, 0.01491147068310259, 0.018158650398966514, 0.018932306278165934, 0.018007843979016357,
         0.012982048804000668, 0.014753927257883182, 0.0091602622196682807, 0.00057093880282301781]]
    x = range(len(data[0]))
    a = plt.plot(x, data[0])
    b = plt.plot(x, data[1])
    c = plt.plot(x, data[2])
    d = plt.plot(x, data[3])
    plt.plot((-10, 27), (0, 0), 'k-')
    plt.xlim([0,23])
    plt.ylim([0, 0.06])
    plt.title("Impact of interval length")
    plt.ylabel("Fuel savings")
    plt.xlabel("Interval length")
    plt.xticks([0, 5, 11, 17, 23], ["5m", "30m", "1h", "1.5h", "2h"])

    plt.legend(['Greedy', 'Random', "Deterministic\nsub modularity", "Stochastic\nsub modularity"])
    plt.show()


def plot_clustering_savings_graph():
    # y = clustering_data()
    y = [0.031303814444070287, 0.026728620753722843, 0.029085513454732204, 0.027236387459671961]
    labels = ["3.1%", "2.7%", "2.9%", "2.7%"]
    N = len(y)
    x = range(N)
    # ["a","b","c","d"]
    width = 1 / 1.5
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']
    bars = plt.bar(x, y, width, alpha=0.8, color=colors)
    for a, b in zip(x, y):
        plt.text(a, b + 0.005, labels[a], ha='center', va='bottom')
    # plt.tight_layout()
    plt.ylim([0, 0.1])
    plt.title("Clustering methods")
    plt.ylabel("Fuel savings")
    # plt.xlabel("Method")
    # plt.set_xticklabels()
    labels2 = ["Greedy", "Random", "Deterministic\nsub modularity", "Stochastic\nsub modularity"]
    plt.xticks(x, labels2)  # , rotation='vertical')
    plt.show()


if __name__ == "__main__":
    main()
